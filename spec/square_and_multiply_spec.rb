require "./lib/square_and_multiply"

describe SquareAndMultiply do
  describe "the square and multiply algorithm," do
    describe 'when masking multiplications,' do
      it "computes correctly with small numbers" do
        a =
        e = 45
        n = 7

        expect(SquareAndMultiply.square_and_multiply(a, e, n, true)).to eql(6)
      end

      it "computes correctly with large numbers" do
        a = 869295196280941424267906868264845356955269826059597141306240818867559676539564952370806056359957642969973019470539721554606375353089531759483331242230066074695699075221161493024316799785448815069302920788649345409477496545465095356367355791468820209841995343141037465787199399952198989036136716075426
        e = 966484842272992637003061931059046178060738257370222723732282819556803283303548012686814566039487452548467218003475124532134141728953942054257886647796167153437555941198741965333517389569926711515312700154239512338617564953956399500899536786340495914771363932497883091344422133515080559830742381777523
        n = 980291056659922243027649151973012179282694135887813750412876581368589288242421828453819423427529289572159090968039200720355795661176174931995765879564086764666410436781380829097979795534364775336958338693350526353385527632840792321663825796888950329539291935447107037852513902000484199860555102214124

        expect(SquareAndMultiply.square_and_multiply(a, e, n, true)).to eql(911499992219132259604189246192775550128498533948236347036422034828548158106932763205988508616165541624928787286050231838422322967669535007621308144092387864542926166801941716986531904803188314050584053441582839459155870551861194869139105717295661112239330042162430422680199812186842367951813200562564)
      end
    end

    describe 'when not masking multiplications,' do
      it "computes correctly with small numbers" do
        a = 3
        e = 45
        n = 7

        expect(SquareAndMultiply.square_and_multiply(a, e, n)).to eql(6)
      end

      it "computes correctly with large numbers" do
        a = 869295196280941424267906868264845356955269826059597141306240818867559676539564952370806056359957642969973019470539721554606375353089531759483331242230066074695699075221161493024316799785448815069302920788649345409477496545465095356367355791468820209841995343141037465787199399952198989036136716075426
        e = 966484842272992637003061931059046178060738257370222723732282819556803283303548012686814566039487452548467218003475124532134141728953942054257886647796167153437555941198741965333517389569926711515312700154239512338617564953956399500899536786340495914771363932497883091344422133515080559830742381777523
        n = 980291056659922243027649151973012179282694135887813750412876581368589288242421828453819423427529289572159090968039200720355795661176174931995765879564086764666410436781380829097979795534364775336958338693350526353385527632840792321663825796888950329539291935447107037852513902000484199860555102214124

        expect(SquareAndMultiply.square_and_multiply(a, e, n)).to eql(911499992219132259604189246192775550128498533948236347036422034828548158106932763205988508616165541624928787286050231838422322967669535007621308144092387864542926166801941716986531904803188314050584053441582839459155870551861194869139105717295661112239330042162430422680199812186842367951813200562564)
      end
    end
  end
end

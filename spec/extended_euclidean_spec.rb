require "./lib/extended_euclidean"

describe ExtendedEuclidean do
  describe "when a = b," do
    it "computes correctly when the gcd is greater 1" do
      a = 49
      result = ExtendedEuclidean.extended_euclidean(a, a)
      gcd, s, t = *result
      expect(result).to eql([a, 1, 0])
      expect((s * a) + (t * a)).to eql(gcd)
    end

    it "computes correctly when the gcd is 1" do
      a = 1
      result = ExtendedEuclidean.extended_euclidean(a, a)
      gcd, s, t = *result
      expect(result).to eql([a, 1, 0])
      expect((s * a) + (t * a)).to eql(gcd)
    end

    it "computes correctly when the gcd is 0" do
      a = 0
      result = ExtendedEuclidean.extended_euclidean(a, a)
      gcd, s, t = *result
      expect(result).to eql([a, 1, 0])
      expect((s * a) + (t * a)).to eql(gcd)
    end

    it "computes correctly with very large numbers" do
      a = 661835468621908443699865081057797086197561069293698787170821069492651758732372348983520149121138010369664095422310688492833721025205758789517855119527869489239833290500814076755183238553294489319718284379371288528276153155876823072733762404594698809809120983656362970519245811426824148753199491032084715019773765771382780767719152635580670931057390632638361889874590132668793453713970187324558800338720331973164519129305782005125148463941403546362738272991344072994814125268738096836756549948583496855160851098979904818785789633007200964155095565394637433496408092608707283852765674960605704337172086118994689448253683446218969082789975725071184497990403728651389969597464138854985378520897505548943601732089288255130546816072872317103702532359494903340539166111086027661841300798424919794543874626964134029457237007044974674786111233229808013658697809359957287085630855758480925136321354510093896905866856029354366058177039979105195193129124541900410581602454423029870167159652922710950573888761838
      result = ExtendedEuclidean.extended_euclidean(a, a)
      gcd, s, t = *result
      expect(result).to eql([a, 1, 0])
      expect((s * a) + (t * a)).to eql(gcd)
    end

    it "raises an error when a is negative" do
      expect{ ExtendedEuclidean.extended_euclidean(-49, -49) }.to raise_error("Input must be non-negative.")
    end
  end

  describe "when a > b," do
    it "computes correctly when the gcd is greater 1" do
      a = 49
      b = 21
      result = ExtendedEuclidean.extended_euclidean(a, b)
      gcd, s, t = *result
      expect(result).to eql([7, 1, -2])
      expect((s * a) + (t * b)).to eql(gcd)
    end

    it "computes correctly when the gcd is 1" do
      a = 49
      b = 22
      result = ExtendedEuclidean.extended_euclidean(a, b)
      gcd, s, t = *result
      expect(result).to eql([1, 9, -20])
      expect((s * a) + (t * b)).to eql(gcd)
      expect((t * b) % a).to eql(1)
    end

    it "computes correctly when one number is 0" do
      a = 49
      b = 0
      result = ExtendedEuclidean.extended_euclidean(a, b)
      gcd, s, t = *result
      expect(result).to eql([49, 1, 0])
      expect((s * a) + (t * b)).to eql(gcd)
    end

    it "computes correctly with very large numbers" do
      a = 673980489686211529998860828485889879046486002598389069716453191920550502714546619841409219585829119215923292532840690584068170020841675746923027621823139377057269430311126197206515821471455174089605733883617617347085554426164530123970569334289869210364780892721249188774777785677248835587168708549227485307135403328225555929533377302712877473304327498419079163886470514358837515397673111890404951173966111990939072363049957924008020774072572817218940510436127681111924701229422769784530465882399359281021506287959253660057477274942674740619183356147432329723703180737236000927251883886722553519858523495788470861207726625895672259300759956147079798704509543598796939188167615678808403963237272279204461983807017888248482799656294586747102515989126282646837296060878731030377122743288107506908710019640159692595581031564517789092405296204076728669394732217425791536629021886485707300289401069123644965286141699223045365747638647850305753513815688415449011306183925948045553412494227341983736334131868
      b = 661835468621908443699865081057797086197561069293698787170821069492651758732372348983520149121138010369664095422310688492833721025205758789517855119527869489239833290500814076755183238553294489319718284379371288528276153155876823072733762404594698809809120983656362970519245811426824148753199491032084715019773765771382780767719152635580670931057390632638361889874590132668793453713970187324558800338720331973164519129305782005125148463941403546362738272991344072994814125268738096836756549948583496855160851098979904818785789633007200964155095565394637433496408092608707283852765674960605704337172086118994689448253683446218969082789975725071184497990403728651389969597464138854985378520897505548943601732089288255130546816072872317103702532359494903340539166111086027661841300798424919794543874626964134029457237007044974674786111233229808013658697809359957287085630855758480925136321354510093896905866856029354366058177039979105195193129124541900410581602454423029870167159652922710950573888761838
      result = ExtendedEuclidean.extended_euclidean(a, b)
      gcd, s, t = *result
      expect(result[0]).to eql(2)
      expect((s * a) + (t * b)).to eql(gcd)
    end

    it "computes correctly with very large coprime numbers" do
      a = 673980489686211529998860828485889879046486002598389069716453191920550502714546619841409219585829119215923292532840690584068170020841675746923027621823139377057269430311126197206515821471455174089605733883617617347085554426164530123970569334289869210364780892721249188774777785677248835587168708549227485307135403328225555929533377302712877473304327498419079163886470514358837515397673111890404951173966111990939072363049957924008020774072572817218940510436127681111924701229422769784530465882399359281021506287959253660057477274942674740619183356147432329723703180737236000927251883886722553519858523495788470861207726625895672259300759956147079798704509543598796939188167615678808403963237272279204461983807017888248482799656294586747102515989126282646837296060878731030377122743288107506908710019640159692595581031564517789092405296204076728669394732217425791536629021886485707300289401069123644965286141699223045365747638647850305753513815688415449011306183925948045553412494227341983736334131868
      b = 661835468621908443699865081057797086197561069293698787170821069492651758732372348983520149121138010369664095422310688492833721025205758789517855119527869489239833290500814076755183238553294489319718284379371288528276153155876823072733762404594698809809120983656362970519245811426824148753199491032084715019773765771382780767719152635580670931057390632638361889874590132668793453713970187324558800338720331973164519129305782005125148463941403546362738272991344072994814125268738096836756549948583496855160851098979904818785789633007200964155095565394637433496408092608707283852765674960605704337172086118994689448253683446218969082789975725071184497990403728651389969597464138854985378520897505548943601732089288255130546816072872317103702532359494903340539166111086027661841300798424919794543874626964134029457237007044974674786111233229808013658697809359957287085630855758480925136321354510093896905866856029354366058177039979105195193129124541900410581602454423029870167159652922710950573888761837
      result = ExtendedEuclidean.extended_euclidean(a, b)
      gcd, s, t = *result
      expect(result[0]).to eql(1)
      expect((s * a) + (t * b)).to eql(gcd)
      expect((t * b) % a).to eql(1)
    end

    it "raises an error when a is negative" do
      expect{ ExtendedEuclidean.extended_euclidean(-49, 21) }.to raise_error("Input must be non-negative.")
    end

    it "raises an error when a is negative" do
      expect{ ExtendedEuclidean.extended_euclidean(49, -21) }.to raise_error("Input must be non-negative.")
    end
  end

  describe "when a < b," do
    it "computes correctly when the gcd is greater 1" do
      a = 21
      b = 49
      result = ExtendedEuclidean.extended_euclidean(a, b)
      gcd, s, t = *result
      expect(result).to eql([7, -2, 1])
      expect((s * a) + (t * b)).to eql(gcd)
    end

    it "computes correctly when the gcd is 1" do
      a = 22
      b = 49
      result = ExtendedEuclidean.extended_euclidean(a, b)
      gcd, s, t = *result
      expect(result).to eql([1, -20, 9])
      expect((s * a) + (t * b)).to eql(gcd)
      expect((t * b) % a).to eql(1)
    end

    it "computes correctly when one number is 0" do
      a = 0
      b = 49
      result = ExtendedEuclidean.extended_euclidean(a, b)
      gcd, s, t = *result
      expect(result).to eql([49, 0, 1])
      expect((s * a) + (t * b)).to eql(gcd)
    end

    it "computes correctly with very large numbers" do
      a = 661835468621908443699865081057797086197561069293698787170821069492651758732372348983520149121138010369664095422310688492833721025205758789517855119527869489239833290500814076755183238553294489319718284379371288528276153155876823072733762404594698809809120983656362970519245811426824148753199491032084715019773765771382780767719152635580670931057390632638361889874590132668793453713970187324558800338720331973164519129305782005125148463941403546362738272991344072994814125268738096836756549948583496855160851098979904818785789633007200964155095565394637433496408092608707283852765674960605704337172086118994689448253683446218969082789975725071184497990403728651389969597464138854985378520897505548943601732089288255130546816072872317103702532359494903340539166111086027661841300798424919794543874626964134029457237007044974674786111233229808013658697809359957287085630855758480925136321354510093896905866856029354366058177039979105195193129124541900410581602454423029870167159652922710950573888761838
      b = 673980489686211529998860828485889879046486002598389069716453191920550502714546619841409219585829119215923292532840690584068170020841675746923027621823139377057269430311126197206515821471455174089605733883617617347085554426164530123970569334289869210364780892721249188774777785677248835587168708549227485307135403328225555929533377302712877473304327498419079163886470514358837515397673111890404951173966111990939072363049957924008020774072572817218940510436127681111924701229422769784530465882399359281021506287959253660057477274942674740619183356147432329723703180737236000927251883886722553519858523495788470861207726625895672259300759956147079798704509543598796939188167615678808403963237272279204461983807017888248482799656294586747102515989126282646837296060878731030377122743288107506908710019640159692595581031564517789092405296204076728669394732217425791536629021886485707300289401069123644965286141699223045365747638647850305753513815688415449011306183925948045553412494227341983736334131868
      result = ExtendedEuclidean.extended_euclidean(a, b)
      gcd, s, t = *result
      expect(result[0]).to eql(2)
      expect((s * a) + (t * b)).to eql(gcd)
    end

    it "computes correctly with very large coprime numbers" do
      a = 661835468621908443699865081057797086197561069293698787170821069492651758732372348983520149121138010369664095422310688492833721025205758789517855119527869489239833290500814076755183238553294489319718284379371288528276153155876823072733762404594698809809120983656362970519245811426824148753199491032084715019773765771382780767719152635580670931057390632638361889874590132668793453713970187324558800338720331973164519129305782005125148463941403546362738272991344072994814125268738096836756549948583496855160851098979904818785789633007200964155095565394637433496408092608707283852765674960605704337172086118994689448253683446218969082789975725071184497990403728651389969597464138854985378520897505548943601732089288255130546816072872317103702532359494903340539166111086027661841300798424919794543874626964134029457237007044974674786111233229808013658697809359957287085630855758480925136321354510093896905866856029354366058177039979105195193129124541900410581602454423029870167159652922710950573888761837
      b = 673980489686211529998860828485889879046486002598389069716453191920550502714546619841409219585829119215923292532840690584068170020841675746923027621823139377057269430311126197206515821471455174089605733883617617347085554426164530123970569334289869210364780892721249188774777785677248835587168708549227485307135403328225555929533377302712877473304327498419079163886470514358837515397673111890404951173966111990939072363049957924008020774072572817218940510436127681111924701229422769784530465882399359281021506287959253660057477274942674740619183356147432329723703180737236000927251883886722553519858523495788470861207726625895672259300759956147079798704509543598796939188167615678808403963237272279204461983807017888248482799656294586747102515989126282646837296060878731030377122743288107506908710019640159692595581031564517789092405296204076728669394732217425791536629021886485707300289401069123644965286141699223045365747638647850305753513815688415449011306183925948045553412494227341983736334131868
      result = ExtendedEuclidean.extended_euclidean(a, b)
      gcd, s, t = *result
      expect(result[0]).to eql(1)
      expect((s * a) + (t * b)).to eql(gcd)
      expect((t * b) % a).to eql(1)
    end

    it "raises an error when a is negative" do
      expect{ ExtendedEuclidean.extended_euclidean(-21, 49) }.to raise_error("Input must be non-negative.")
    end

    it "raises an error when a is negative" do
      expect{ ExtendedEuclidean.extended_euclidean(21, -49) }.to raise_error("Input must be non-negative.")
    end
  end
end
